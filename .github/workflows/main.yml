name: Unity WebGL Automatic Build ðŸ‘½âœ¨ðŸš€

on:
  pull_request:
    branches:    
      - 'develop'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Unity Build ðŸ‘½
    runs-on: ubuntu-latest

    steps:
      
      - name: sudo user
        run: |
          sudo -i

      # Checkout (without LFS) 
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}


      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          ls
          git reset --hard
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Verify LFS Cache
        run: |
          echo "LFS cache directory contents:"
          ls -al .git/lfs || echo ".git/lfs directory does not exist"
          
        # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
          
      # Cache Unity Library
      - name: Cache Library directory
        uses: actions/cache@v3
        id: unity-cache
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - name: Verify Library Cache
        run: |
          echo "Library directory contents:"
          ls -al Library || echo "Library directory does not exist"

      - name: Ensure dev-build Branch Exists
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/dev-build; then
            echo "Branch 'dev-build' exists."
            git checkout dev-build
          else
            echo "Branch 'dev-build' does not exist. Creating it."
            git checkout -b dev-build
            git push --set-upstream origin dev-build
          fi

      - name: Remove Old Build from dev-build
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          git checkout dev-build
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "${{ secrets.GH_USERNAME }}"
          if [ -f "./index.html" ] || [ -d "./Build" ]; then
            git rm -rf index.html Build
          else
            echo "File ./index.html and Build folder do not exist, skipping removal."
          fi
          git add -f .
          git commit -m "remove old artifacts" || echo "No changes to commit"
          git push --force origin dev-build
          git stash pop || echo "No local changes to pop" # Handle no stash scenario
          git checkout develop
          
      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          buildsPath: ./Builds
          allowDirtyBuild: true

      # Output: Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ vars.ARTIFACT_NAME }}
          path: ./Builds/

      # Deployment
      - name: Push Build artifact to deb-build branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          sudo chown -R $USER:$USER .
          git add -f Builds
          git stash push --keep-index
          git add -f .
          git commit -m "new build"
          git checkout dev-build
          git checkout develop -- ./Builds 
          cp -r ./Builds/WebGL/WebGL/* ./  # Copy build files to root
          git rm -rf Builds
          git add -f .
          git commit -m "Updated build artifacts"
          git push origin dev-build --force
