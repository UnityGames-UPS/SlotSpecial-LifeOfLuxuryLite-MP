using System.Collections;
using System.Collections.Generic;
using Best.HTTP.SecureProtocol.Org.BouncyCastle.Cms;
using UnityEngine;
using UnityEngine.UI.Extensions;

public class PayLineManager : MonoBehaviour
{
    [SerializeField] private int x_Distance;
    [SerializeField] private int y_Distance;
    [SerializeField] private Transform LineContainer;
    [SerializeField] private GameObject Line_Prefab;
    [SerializeField] private Vector2 InitialLinePosition;
    private GameObject TempObj = null;

    //generate lines at runtime accordingly
    internal void GeneratePayLine(List<int> y_index, Color color, bool isStatic = false)
    {
        GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);

        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();
        for (int i = 0; i < y_index.Count; i++)
        {
            // print("y_index[i]: " + y_index[i]);
            var points = new Vector2() { x = i * x_Distance, y = y_index[i] * -y_Distance };
            var pointlist = new List<Vector2>(MyLine.Points);
            pointlist.Add(points);
            MyLine.Points = pointlist.ToArray();
        }
        
        var newpointlist = new List<Vector2>(MyLine.Points);
        newpointlist.RemoveAt(0);
        MyLine.Points = newpointlist.ToArray();
        MyLine.color = color;

        if(isStatic)
        {
            TempObj = MyLineObj;
        }
    }

    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        if(TempObj!=null)
        {
            Destroy(TempObj);
            TempObj = null;
        }
    }

    //delete all lines
    internal void ResetLines()
    {
        foreach (Transform child in LineContainer)
        {
            Destroy(child.gameObject);
        }
    }
}
